<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jakekara.github.io</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://example.com/</link>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Oct 2016 15:05:48 -0400</pubDate>
    <lastBuildDate>Sun, 23 Oct 2016 15:05:48 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Deploying Django news apps on AWS</title>
        <description>&lt;p&gt;$ docker run -p 8080:80 jkara/occupation:latest&lt;/p&gt;

&lt;p&gt;Run that command and you’ll be hosting your own local version of &lt;a href=&quot;http://occupation.trendct.org/&quot;&gt;This
Django app I built&lt;/a&gt; to compare wages for
the same occupation across different states. (While it’s running visit
localhost:8080 from a browser).&lt;/p&gt;

&lt;p&gt;I’ve deployed Django apps on AWS three different ways now, and I wanted to
put down some of my thoughts on each approach. I know, this is poorly organized.&lt;/p&gt;

&lt;h3 id=&quot;approach-1-a-raw-ec2-container&quot;&gt;Approach 1. A “raw” EC2 container&lt;/h3&gt;

&lt;p&gt;The first time I used AWS, I just wanted to spin up a VPS, and EC2 was the
most like other VPS hosting I’d used in the past. It’s just a virtual
server, I SSHed into, configured to match my dev environment, and then
deployed my app. Meh.&lt;/p&gt;

&lt;h3 id=&quot;approach-2-a-docker-container-on-beanstalk&quot;&gt;Approach 2. A Docker container on Beanstalk&lt;/h3&gt;

&lt;p&gt;Building my app locally in Docker allowed me to push it to a Docker repo
and then upload a Dockerrun.aws.json file to Beanstalk to deploy my
app. This is already better than solution 1, since it doesn’t require the
fiddling around with making the virtual server match my dev environment.&lt;/p&gt;

&lt;p&gt;That’s how I built this occupational wage comparison app.&lt;/p&gt;

&lt;p&gt;One distinct bonus of using Docker is that I can just share the image with
colleagues and let them run it locally, without deploying it.&lt;/p&gt;

&lt;p&gt;Another nicety of using Docker is that development process feels especially
clean, since it’s isolated from your dev host.&lt;/p&gt;

&lt;p&gt;In my case, I built a base container that included Apache and with mod_wsgi
and a specific directory where the app would live. When I ran the docker
image, I used the -v flag to mount the local volume where I was developing
my app. This way I didn’t have to build the image every time I changed the
app. I use the base image for every Docker/Django app I write, and I use a
Makefile to simplify that process.&lt;/p&gt;

&lt;p&gt;AWS does offer some pre-baked base Docker images, but by the time I figured
that out I had already built my own. My base image works pretty much
exactly the same way, but I’m sure Amazon’s is better.&lt;/p&gt;

&lt;h3 id=&quot;approach-3-lambda&quot;&gt;Approach 3. Lambda&lt;/h3&gt;

&lt;p&gt;One word: &lt;a href=&quot;https://github.com/Miserlou/Zappa&quot;&gt;Zappa&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zappa is a deploy tool for Python apps on Lambda. It gives you a bunch of
features Lambda should probably just give you out of the box.&lt;/p&gt;

&lt;p&gt;To build and deploy an app, you just write your Django app and use zappa to do
all the packaging and deploying to Lambda. The tutorial on the link above
is good.&lt;/p&gt;

&lt;h3 id=&quot;the-winner-lambdazappa&quot;&gt;The winner: Lambda/Zappa&lt;/h3&gt;

&lt;p&gt;Overall, I prefer the Lambda approach, and I think it makes the most sense
for medium-sized news organizations that push a lot of apps. Here’s why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Zappa works great, right out of the box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda represents a significant cost savings. It
doesn’t use any compute time when there is no traffic to the site, unlike
an EC2 instance which has some baseline cost. This is important for a small
news non-profit like the one where I work. I write a lot of apps, and I
want to be able to deploy them all independently and leave them
running. With Lambda, I don’t have to worry about the cumulative costs as
much.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It feels like the least bloated, most logical way to to do this
thing. After all, my end goal is just to get a Django app living on the web
somewhere. I don’t really want to configure a server, even if it is inside
a Docker container and I only have to do it once. With Lambda, all you are
uploading is your Python code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;design-considerations-externalizing-state-and-serving-static-files&quot;&gt;Design considerations: Externalizing state and serving static files&lt;/h3&gt;

&lt;p&gt;News apps are different from most types of web apps. Many of them them
don’t have to manage users, and they may not have any state that needs to
persist beyond the baked-in data that you’re presenting. I news see apps in
the following categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Client-only, frozen-state - These are apps that can be written
completely in client-side code, JavaScript and HTML. They may have data but
it’s a small enough amount of data that you can just send all of it
(usually as a JSON object) to the client. Hosting these just means serving
up the files somewhere, that’s it. Yay.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Client-server, frozen state - These are like Client-only apps but
there’s too much data to send in a browser request. In many cases, the user
will never need all of the data. The occupation app at the top of this
story is one of these kinds of apps. It has a big database that needs to be
queried either on page load, through AJAX or both. But the database doesn’t
ever need to change once the app is deployed. There are no users to manage,
no blog posts or anything.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Persistent state - These are like 2, but they have users. An example
might a project that has a blog compontent, where your colleagues need to
store data in a database. That database need to persist no matter whether
your app instance is killed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In case of type 2 “frozen-state” apps, Docker might be better than
Lambda for one reason: You can store your database as sqlite3 right in your
Docker container and deploy it. That’s what I did with the occupation
app. Of course this doesn’t work for type 3 “Persistent-state” apps,
because the database would be immutable, and any blog posts your colleagues
write would vanish whenever the container was killed. They wouldn’t like
that.&lt;/p&gt;

&lt;p&gt;In all of these cases, it’s possible to just externalize data to an RDS
database or some other managed database service. That’s what I’m doing in a
project I’ll be deploying in November.&lt;/p&gt;

&lt;p&gt;Just like a database that never needs to be changed, static files can also
be baked into a Docker container. But with Lambda that isn’t really
possible, as far as I know. Static files need to be externalized, and I
like S3 for that. &lt;a href=&quot;https://www.caktusgroup.com/blog/2014/11/10/Using-Amazon-S3-to-store-your-Django-sites-static-and-media-files/&quot;&gt;Here’s a guide
I&lt;/a&gt;
that I follow for that.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Oct 2016 12:00:00 -0400</pubDate>
        <link>http://example.com/docker/2016/10/23/docker-beanstalk-django.html</link>
        <guid isPermaLink="true">http://example.com/docker/2016/10/23/docker-beanstalk-django.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>OCaml algebraic data types and pattern matching</title>
        <description>&lt;p&gt;I wrote a royal flush simulator in OCaml just to not forget the language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jakekara/ocaml-cardstuff&quot;&gt;Here it is&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OCaml is cool. I took a class, Abstraction and Design in Computation, that
used OCaml exclusively. It was a good language for that class because we
began with functional programming, including using modules and functors,
and then moved to object oriented programming. It handles both paradigms
well.&lt;/p&gt;

&lt;p&gt;A fellow programmer who doesn’t write functional code asked why I liked
OCaml after taking this class, and I told him about algebraic data
types. The best example I could think of was expressing a deck of cards in
code, which is certainly possible in any programming paradigm and language,
but I think much more pleasant in OCaml.&lt;/p&gt;

&lt;p&gt;Here’s an algebraic data type I defined to represet card faces (in cards.ml):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;face_value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Two&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Three&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Four&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Five&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Six&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seven&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Eight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ten&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;King&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I did the same thing to define a type for suits…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Type for card suits*)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Diamonds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Clubs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hearts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Spades&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;… and then defined a card as a suit, face tuple:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Type for cards *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;face_value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I could use variables to represent each face value and assign a numeric
value, but that has a few drawbacks.&lt;/p&gt;

&lt;p&gt;First of all, because face_value is a type now, OCaml will handle
enforcement anywhere you specificy you want a face_value. You don’t have to
just use an int and then check every time that it’s within the specified
range.&lt;/p&gt;

&lt;p&gt;Second, it’s easier to read.&lt;/p&gt;

&lt;p&gt;Third, with OCaml’s pattern matching, I now use these types to write
relatively readable, and short, code to test for a royal flush:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Test whether hand is a royal flush *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;royal_flush&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hands_match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;King&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method takes a hand (a list of items of type card) and then tests if
it matches the “pattern” for a royal flush. A royal flush contains an Ace,
King, Queen, Jack and Ten, all of the same suit. I take the “suit” of the
first card, and then test whether the pattern holds. Notice that “suit” is
a variable.&lt;/p&gt;

&lt;p&gt;I believe the above code is much more elegant and readable than could
otherwise be written without pattern matching and algebraic data types.&lt;/p&gt;

&lt;p&gt;I don’t get to use OCaml in my daily work, and I miss it.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Oct 2016 18:30:00 -0400</pubDate>
        <link>http://example.com/ocaml/cardstuff/2016/10/14/ocaml-algebraic-data-types.html</link>
        <guid isPermaLink="true">http://example.com/ocaml/cardstuff/2016/10/14/ocaml-algebraic-data-types.html</guid>
        
        
        <category>ocaml</category>
        
        <category>cardstuff</category>
        
      </item>
    
      <item>
        <title>Ghostery doesn't like AWS Beanstalk</title>
        <description>&lt;p&gt;Ghostery blocks assets from crazy AWS beanstalk endpoints.&lt;/p&gt;

&lt;p&gt;Other malware/adware/tracker blockers probably do the same.&lt;/p&gt;

&lt;p&gt;I spent half a day pulling my hair out over this, so I’m posting an
admission of my own stupidity as a public service.&lt;/p&gt;

&lt;p&gt;If your css and JS assets aren’t loading when you’re testing a Beanstalk
service, just turn off Ghostery. That’s it.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 18:30:00 -0400</pubDate>
        <link>http://example.com/aws/2016/10/12/aws-beanstalk-and-ghostery.html</link>
        <guid isPermaLink="true">http://example.com/aws/2016/10/12/aws-beanstalk-and-ghostery.html</guid>
        
        
        <category>AWS</category>
        
      </item>
    
      <item>
        <title>Brute forcing URL shorteners</title>
        <description>&lt;p&gt;I experimented in brute-forcing URL shortening services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jakekara/python-get-shorty&quot;&gt;Here’s&lt;/a&gt; the repo (Python).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jakekara/python-get-shorty/blob/master/sample_output/two-chars.tsv&quot;&gt;Here’s a
.tsv&lt;/a&gt;
of all the two-character bit.ly links and the URLs they forward to.&lt;/p&gt;

&lt;p&gt;It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generate the valid URLs&lt;/li&gt;
  &lt;li&gt;Send an HTTP request with the request library&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There have been a decent number of
&lt;a href=&quot;https://www.schneier.com/blog/archives/2016/04/security_risks_11.html&quot;&gt;stories&lt;/a&gt;
lately about the security risks posed by URL shorteners because they can be trivially brute forced. A lot of shortened links are probably meant to be public, such as URLs shortened for sharing on social media, but I guess some services, like OneDrive, use short URLs for documents.&lt;/p&gt;

&lt;h3 id=&quot;disabling-rediects&quot;&gt;disabling rediects&lt;/h3&gt;

&lt;p&gt;Since I only wanted to find the full URLs that were being redirected to,
and not actually download their content, I set the requets allow_redirects
option to False.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allow_redirects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 08 Oct 2016 22:57:30 -0400</pubDate>
        <link>http://example.com/python/2016/10/08/brute-forcing-url-shorteners.html</link>
        <guid isPermaLink="true">http://example.com/python/2016/10/08/brute-forcing-url-shorteners.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Visualizing foliage</title>
        <description>&lt;p&gt;I made a thing to compare foliage in two locations over four years.&lt;/p&gt;

&lt;p&gt;You can see &lt;a href=&quot;https://jakekara.github.io/foliage-viz/&quot;&gt;the demo here&lt;/a&gt; and on
&lt;a href=&quot;http://projects.ctmirror.org/content/trend/2016/10/foliage/&quot;&gt;TrendCT.org here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code is &lt;a href=&quot;https://github.com/jakekara/foliage-viz&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It uses d3. It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Load in a spreadsheet containing a color for each
day, which my colleague Andrew Ba Tran &lt;a href=&quot;https://github.com/trendct-data/ct-leaf-colors-analysis&quot;&gt;generated using R&lt;/a&gt;.
The color is meant to be a representative of the foliage color for that day, or
at least the most-dominant color.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate a bar for each year, filled with individual div elements that each
represent a day, and are colored according to the file in step 1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a slider to allow you to slide through the days of the year. On each day,
it shows all four pictures side by side, and theoretically gives you some sense
of how brilliant the foliage has historically been on a given day. At least
that’s sort of the over-intellectualized justification for it. It’s really just
fun and I don’t walk away from a coding challenge.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;momentjs&quot;&gt;moment.js&lt;/h3&gt;

&lt;p&gt;I used &lt;a href=&quot;http://momentjs.com/&quot;&gt;moment.js&lt;/a&gt; to do a few things. It seems to be a
really nice library.&lt;/p&gt;

&lt;p&gt;I used it to map each value from 1 to 366 (leap years) on the slider to an
actual date, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYY DDD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYY DDD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;FOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load_date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loc_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// , 2020);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When the app is bootstrapping, moment.js to get the current date and use it to
load the thumbnails for the current day (of the past years).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;FOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loc_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;jekyll&lt;/h3&gt;

&lt;p&gt;This was the first project I used jekyll for, and it was a perfect application.&lt;/p&gt;

&lt;p&gt;I didn’t just design the interactives; but the whole page layout, since our site
&lt;a href=&quot;//trendct.org&quot;&gt;trendct.org&lt;/a&gt;, doesn’t have a full-width template for projects
like this that have a lot of components.&lt;/p&gt;

&lt;p&gt;A great freebie is that all I have to do is enable the project page in the repo
settings and I have a live demo of my app.&lt;/p&gt;

&lt;p&gt;I got so hooked on Jekyll that I built this blog with it.&lt;/p&gt;

&lt;h3 id=&quot;failures&quot;&gt;Failures&lt;/h3&gt;

&lt;p&gt;Visually, the interactive could be better; I’ll admit that. Deadlines.&lt;/p&gt;

</description>
        <pubDate>Mon, 03 Oct 2016 19:57:30 -0400</pubDate>
        <link>http://example.com/javascript/2016/10/03/foliage-tracker.html</link>
        <guid isPermaLink="true">http://example.com/javascript/2016/10/03/foliage-tracker.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Finding bears with Pandas</title>
        <description>&lt;p&gt;I wrote some code to get the latest Connecticut bear sightings.&lt;/p&gt;

&lt;p&gt;I wanted to try out Pandas’ .read_html() method in order to turn html
tables into dataframes.&lt;/p&gt;

&lt;p&gt;The code downloads the latest count of reported bear sightings for every town in
Connecticut from &lt;a href=&quot;http://www.depdata.ct.gov/wildlife/sighting/bearsight.asp&quot;&gt;this CT Department of Energy and Environmental Protection
(DEEP) page&lt;/a&gt; and
turns it into a DataFrame and exports .csv.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 19:57:30 -0400</pubDate>
        <link>http://example.com/python/2016/10/01/omg-bears.html</link>
        <guid isPermaLink="true">http://example.com/python/2016/10/01/omg-bears.html</guid>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
