<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jakekara.github.io</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://example.com/</link>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Oct 2016 09:43:32 -0400</pubDate>
    <lastBuildDate>Sun, 09 Oct 2016 09:43:32 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Brute forcing URL shorteners</title>
        <description>&lt;p&gt;I experimented in brute-forcing URL shortening services, written in
python.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jakekara/python-get-shorty&quot;&gt;Here’s&lt;/a&gt; the repo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jakekara/python-get-shorty/blob/master/sample_output/two-chars.tsv&quot;&gt;Here’s a
.tsv&lt;/a&gt;
of all the two-character bit.ly links and the URLs they forward to.&lt;/p&gt;

&lt;p&gt;It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generate the valid URLs&lt;/li&gt;
  &lt;li&gt;Send an HTTP request with the request library&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There’s been a decent number of
&lt;a href=&quot;https://www.schneier.com/blog/archives/2016/04/security_risks_11.html&quot;&gt;stories&lt;/a&gt;
lately about the security risks posed by URL shorteners because they can be trivially brute forced. A lot of shortened links are probably meant to be public, such as URLs shortened for sharing on social media, but I guess some services, like OneDrive, use short URLs for documents.&lt;/p&gt;

&lt;h3 id=&quot;disabling-rediects&quot;&gt;disabling rediects&lt;/h3&gt;

&lt;p&gt;Since I only wanted to find the full URLs that were being redirected to,
and not actually download their content, I set the requets allow_redirects
option to False.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allow_redirects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 08 Oct 2016 22:57:30 -0400</pubDate>
        <link>http://example.com/python/2016/10/08/brute-forcing-url-shorteners.html</link>
        <guid isPermaLink="true">http://example.com/python/2016/10/08/brute-forcing-url-shorteners.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Visualizing foliage</title>
        <description>&lt;p&gt;I made a thing to compare foliage in two locations over four years.&lt;/p&gt;

&lt;p&gt;You can see &lt;a href=&quot;https://jakekara.github.io/foliage-viz/&quot;&gt;the demo here&lt;/a&gt; and on
&lt;a href=&quot;http://projects.ctmirror.org/content/trend/2016/10/foliage/&quot;&gt;TrendCT.org here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code is &lt;a href=&quot;https://github.com/jakekara/foliage-viz&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It uses d3. It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Load in a spreadsheet containing a color for each
day, which my colleague Andrew Ba Tran &lt;a href=&quot;https://github.com/trendct-data/ct-leaf-colors-analysis&quot;&gt;generated using R&lt;/a&gt;.
The color is meant to be a representative of the foliage color for that day, or
at least the most-dominant color.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate a bar for each year, filled with individual div elements that each
represent a day, and are colored according to the file in step 1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a slider to allow you to slide through the days of the year. On each day,
it shows all four pictures side by side, and theoretically gives you some sense
of how brilliant the foliage has historically been on a given day. At least
that’s sort of the over-intellectualized justification for it. It’s really just
fun and I don’t walk away from a coding challenge.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;momentjs&quot;&gt;moment.js&lt;/h3&gt;

&lt;p&gt;I used &lt;a href=&quot;http://momentjs.com/&quot;&gt;moment.js&lt;/a&gt; to do a few things. It seems to be a
really nice library.&lt;/p&gt;

&lt;p&gt;I used it to map each value from 1 to 366 (leap years) on the slider to an
actual date, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYY DDD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2016 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YYYY DDD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;FOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load_date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loc_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// , 2020);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When the app is bootstrapping, moment.js to get the current date and use it to
load the thumbnails for the current day (of the past years).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;FOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loc_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;jekyll&lt;/h3&gt;

&lt;p&gt;This was the first project I used jekyll for, and it was a perfect application.&lt;/p&gt;

&lt;p&gt;I didn’t just design the interactives; but the whole page layout, since our site
&lt;a href=&quot;//trendct.org&quot;&gt;trendct.org&lt;/a&gt;, doesn’t have a full-width template for projects
like this that have a lot of components.&lt;/p&gt;

&lt;p&gt;A great freebie is that all I have to do is enable the project page in the repo
settings and I have a live demo of my app.&lt;/p&gt;

&lt;p&gt;I got so hooked on Jekyll that I built this blog with it.&lt;/p&gt;

&lt;h3 id=&quot;failures&quot;&gt;Failures&lt;/h3&gt;

&lt;p&gt;Visually, the interactive could be better; I’ll admit that. Deadlines.&lt;/p&gt;

</description>
        <pubDate>Mon, 03 Oct 2016 19:57:30 -0400</pubDate>
        <link>http://example.com/javascript/2016/10/03/foliage-tracker.html</link>
        <guid isPermaLink="true">http://example.com/javascript/2016/10/03/foliage-tracker.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Finding bears with Pandas</title>
        <description>&lt;p&gt;I wrote some code to get the latest Connecticut bear sightings.&lt;/p&gt;

&lt;p&gt;I wanted to try out Pandas’ .read_html() method in order to turn html
tables into dataframes.&lt;/p&gt;

&lt;p&gt;The code downloads the latest count of reported bear sightings for every town in
Connecticut from &lt;a href=&quot;http://www.depdata.ct.gov/wildlife/sighting/bearsight.asp&quot;&gt;this CT Department of Energy and Environmental Protection
(DEEP) page&lt;/a&gt; and
turns it into a DataFrame and exports .csv.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 19:57:30 -0400</pubDate>
        <link>http://example.com/python/2016/10/01/omg-bears.html</link>
        <guid isPermaLink="true">http://example.com/python/2016/10/01/omg-bears.html</guid>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
